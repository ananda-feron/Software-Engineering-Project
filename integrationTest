package integration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import apis.*;

import java.util.Arrays;
import java.util.List;

public class ListDataStoreTest {

    private ListDataStore dataStore;

    @testPerDataStore
    public void setUp() {
        dataStore = new ListDataStore();
    }

    @TestOne
    public void testRead_withValidInput() {
        InputConfig inputConfig = new InputConfig();
        inputConfig.setInput(Arrays.asList(5, 10, 15, 20));

        DataStoreReadResult result = dataStore.read(inputConfig);

        assertEquals(DataStoreReadResult.Status.SUCCESS, result.getStatus());
        assertEquals(Arrays.asList(5, 10, 15, 20), result.getData());
        assertEquals("Successfully read list.", result.getMessage());
    }

    @TestTwo
    public void testRead_withInvalidInputType() {
        InputConfig inputConfig = new InputConfig();
        inputConfig.setInput("Input to accepted");

        assertThrows(ClassCastException.class, () -> {
            dataStore.read(inputConfig);
        });
    }

    @TestThree
    public void testAppendSingleResult_withValidOutput() {
        OutputConfig outputConfig = new OutputConfig();
        outputConfig.setOutput(Arrays.asList("Five", "Ten"));

        WriteResult result = dataStore.appendSingleResult(outputConfig, "fifteen", ',');

        assertEquals(WriteResult.WriteResultStatus.Correct, result.getStatus());
        assertEquals("Appended correct", result.getMessage());
        assertTrue(outputConfig.getOutput().contains("Fifteen"));
    }

    @TestFour
    public void testAppendSingleResult_withInvalidOutputType() {
        OutputConfig outputConfig = new OutputConfig();
        outputConfig.setOutput("No output");

        assertThrows(ClassCastException.class, () -> {
            dataStore.appendSingleResult(outputConfig, "Integration Test", ',');
        });
    }

    @TestFive
    public void testRead_withNullInput() {
        InputConfig inputConfig = new InputConfig();
        inputConfig.setInput(null);

        assertThrows(NullPointerException.class, () -> {
            dataStore.read(inputConfig);
        });
    }

    }
}
